-- ======================================================================
-- V1__init_app_schema.sql
-- Схема БД для сервиса тестирования интеграций
-- ======================================================================

CREATE SCHEMA IF NOT EXISTS ${app_schema};
COMMENT ON SCHEMA ${app_schema} IS 'Схема для объектов сервиса тестирования интеграций';

-- =============================
-- СПРАВОЧНИКИ
-- =============================

-- Типы проверок
CREATE TABLE IF NOT EXISTS ${app_schema}.ref_check_type
(
    code TEXT PRIMARY KEY
);
COMMENT ON TABLE ${app_schema}.ref_check_type IS 'Справочник типов проверок';
COMMENT ON COLUMN ${app_schema}.ref_check_type.code IS 'Код типа проверки';

INSERT INTO ${app_schema}.ref_check_type(code)
VALUES ('REST_API'),
       ('DATABASE'),
       ('KAFKA')
ON CONFLICT DO NOTHING;

-- HTTP-методы
CREATE TABLE IF NOT EXISTS ${app_schema}.ref_http_method
(
    code TEXT PRIMARY KEY
);
COMMENT ON TABLE ${app_schema}.ref_http_method IS 'Справочник HTTP-методов для REST API-проверок';
COMMENT ON COLUMN ${app_schema}.ref_http_method.code IS 'Метод HTTP';

INSERT INTO ${app_schema}.ref_http_method(code)
VALUES ('GET'),
       ('POST'),
       ('PUT')
ON CONFLICT DO NOTHING;

-- Статусы результатов
CREATE TABLE IF NOT EXISTS ${app_schema}.ref_status_code
(
    code TEXT PRIMARY KEY
);
COMMENT ON TABLE ${app_schema}.ref_status_code IS 'Справочник статусов результата проверки';
COMMENT ON COLUMN ${app_schema}.ref_status_code.code IS 'Статус результата проверки';

INSERT INTO ${app_schema}.ref_status_code(code)
VALUES ('SUCCESS'),
       ('FAILURE'),
       ('TIMEOUT'),
       ('ERROR')
ON CONFLICT DO NOTHING;

-- =============================
-- ОСНОВНЫЕ СУЩНОСТИ
-- =============================

-- Проверка
CREATE TABLE IF NOT EXISTS ${app_schema}.h_check
(
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY,
    name             VARCHAR(250) NOT NULL,
    description      VARCHAR(1000),
    is_enabled       BOOLEAN      NOT NULL DEFAULT TRUE,
    run_interval_min INTEGER      NOT NULL,
    next_run_at      TIMESTAMP    NOT NULL DEFAULT NOW(),
    type_code        TEXT         NOT NULL,

    CONSTRAINT pk_h_check
        PRIMARY KEY (id),

    CONSTRAINT uq_h_check__name
        UNIQUE (name),

    CONSTRAINT ck_h_check__interval_range
        CHECK (run_interval_min BETWEEN 1 AND 10080),

    CONSTRAINT fk_h_check__type
        FOREIGN KEY (type_code)
            REFERENCES ${app_schema}.ref_check_type (code)
            ON UPDATE CASCADE ON DELETE RESTRICT
);
COMMENT ON TABLE ${app_schema}.h_check IS 'Список проверок (задачи планировщика)';
COMMENT ON COLUMN ${app_schema}.h_check.id IS 'Идентификатор проверки (PK)';
COMMENT ON COLUMN ${app_schema}.h_check.name IS 'Уникальное имя проверки';
COMMENT ON COLUMN ${app_schema}.h_check.description IS 'Описание проверки';
COMMENT ON COLUMN ${app_schema}.h_check.is_enabled IS 'Флаг включения проверки';
COMMENT ON COLUMN ${app_schema}.h_check.run_interval_min IS 'Период запусков в минутах (1..10080)';
COMMENT ON COLUMN ${app_schema}.h_check.next_run_at IS 'Следующее запланированное время запуска';
COMMENT ON COLUMN ${app_schema}.h_check.type_code IS 'Тип проверки (FK на ref_check_type)';

CREATE INDEX IF NOT EXISTS ix_h_check__due
    ON ${app_schema}.h_check (next_run_at)
    WHERE is_enabled IS TRUE;
COMMENT ON INDEX ${app_schema}.ix_h_check__due IS 'Ускоряет выборку просроченных/ближайших проверок при is_enabled=TRUE';

-- Профиль REST API
CREATE TABLE IF NOT EXISTS ${app_schema}.h_check_rest_api
(
    check_id         BIGINT  NOT NULL,
    url              TEXT    NOT NULL,
    http_method_code TEXT    NOT NULL,
    timeout_seconds  INTEGER NOT NULL DEFAULT 30,
    headers JSONB NOT NULL DEFAULT '{}'::jsonb,
    request_body     TEXT,

    CONSTRAINT pk_h_check_rest_api
        PRIMARY KEY (check_id),

    CONSTRAINT fk_h_check_rest_api__check
        FOREIGN KEY (check_id)
            REFERENCES ${app_schema}.h_check (id)
            ON DELETE CASCADE,

    CONSTRAINT fk_h_check_rest_api__http_method
        FOREIGN KEY (http_method_code)
            REFERENCES ${app_schema}.ref_http_method (code)
            ON UPDATE CASCADE ON DELETE RESTRICT,

    CONSTRAINT ck_h_check_rest_api__timeout_range
        CHECK (timeout_seconds BETWEEN 1 AND 600),

    CONSTRAINT ck_h_check_rest_api__headers_is_object
        CHECK (jsonb_typeof(headers) = 'object')
);
COMMENT ON TABLE  ${app_schema}.h_check_rest_api IS 'Параметры для проверок REST API (1:1 с h_check)';
COMMENT ON COLUMN ${app_schema}.h_check_rest_api.check_id IS 'PK = FK на h_check.id';
COMMENT ON COLUMN ${app_schema}.h_check_rest_api.url IS 'Целевой URL';
COMMENT ON COLUMN ${app_schema}.h_check_rest_api.http_method_code IS 'HTTP-метод (FK на ref_http_method)';
COMMENT ON COLUMN ${app_schema}.h_check_rest_api.timeout_seconds IS 'Таймаут HTTP-запроса, сек';
COMMENT ON COLUMN ${app_schema}.h_check_rest_api.headers IS 'Заголовки запроса (JSONB-объект, ключи — имена заголовков)';
COMMENT ON COLUMN ${app_schema}.h_check_rest_api.request_body IS 'Тело запроса (TEXT; может быть JSON, XML, form-data шаблон и т.п.)';

-- Результаты запусков
CREATE TABLE IF NOT EXISTS ${app_schema}.h_check_result
(
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY,
    check_id         BIGINT,
    cluster_id       TEXT      NOT NULL,
    started_at       TIMESTAMP NOT NULL,
    status_code      TEXT      NOT NULL,
    details JSONB NOT NULL DEFAULT '{}'::jsonb,
    error_code       VARCHAR(100),
    error_message    TEXT,
    http_status_code INTEGER,

    CONSTRAINT pk_h_check_result
        PRIMARY KEY (id),

    CONSTRAINT fk_h_check_result__check
        FOREIGN KEY (check_id)
            REFERENCES ${app_schema}.h_check (id)
            ON DELETE SET NULL,

    CONSTRAINT fk_h_check_result__status
        FOREIGN KEY (status_code)
            REFERENCES ${app_schema}.ref_status_code (code)
            ON UPDATE CASCADE ON DELETE RESTRICT,

    CONSTRAINT ck_h_check_result__http_status_range
        CHECK (http_status_code IS NULL OR (http_status_code BETWEEN 100 AND 599)),

    CONSTRAINT ck_h_check_result__details_is_object
        CHECK (jsonb_typeof(details) = 'object')
);
COMMENT ON TABLE ${app_schema}.h_check_result IS 'История запусков проверок';
COMMENT ON COLUMN ${app_schema}.h_check_result.check_id IS 'FK на проверку (может быть NULL для общесистемных событий)';
COMMENT ON COLUMN ${app_schema}.h_check_result.cluster_id IS 'Идентификатор кластера/окружения';
COMMENT ON COLUMN ${app_schema}.h_check_result.started_at IS 'Время начала выполнения';
COMMENT ON COLUMN ${app_schema}.h_check_result.status_code IS 'Статус результата (FK на ref_status_code)';
COMMENT ON COLUMN ${app_schema}.h_check_result.details IS 'Детали выполнения/ответа (JSONB-объект)';
COMMENT ON COLUMN ${app_schema}.h_check_result.error_code IS 'Код ошибки/исключения';
COMMENT ON COLUMN ${app_schema}.h_check_result.error_message IS 'Краткое сообщение об ошибке';
COMMENT ON COLUMN ${app_schema}.h_check_result.http_status_code IS 'HTTP-статус (для REST API-проверок)';

CREATE INDEX IF NOT EXISTS ix_h_check_result__check_time
    ON ${app_schema}.h_check_result (check_id, started_at DESC);
COMMENT ON INDEX ${app_schema}.ix_h_check_result__check_time IS 'Поиск результатов по проверке и времени';

CREATE INDEX IF NOT EXISTS ix_h_check_result__status_code
    ON ${app_schema}.h_check_result (status_code);
COMMENT ON INDEX ${app_schema}.ix_h_check_result__status_code IS 'Фильтрация результатов по статусу';